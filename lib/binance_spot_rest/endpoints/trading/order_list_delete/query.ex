defmodule BinanceSpotRest.Endpoints.Trading.OrderListDelete.Query do
  @moduledoc """
  Order List (delete)

  #### Cancel Order list (TRADE)

  ```
  DELETE /api/v3/orderList
  ```

  Cancel an entire Order list

  **Weight:**
  1

  **Parameters:**

  | Name              | Type   | Mandatory | Description                                                               |
  | ----------------- | ------ | --------- | ------------------------------------------------------------------------- |
  | symbol            | STRING | YES       |                                                                           |
  | orderListId       | LONG   | NO        | Either `orderListId` or `listClientOrderId` must be provided              |
  | listClientOrderId | STRING | NO        | Either `orderListId` or `listClientOrderId` must be provided              |
  | newClientOrderId  | STRING | NO        | Used to uniquely identify this cancel. Automatically generated by default |
  | recvWindow        | LONG   | NO        | The value cannot be greater than `60000`                                  |
  | timestamp         | LONG   | YES       |                                                                           |

  **Notes:**

  - Canceling an individual order from an order list will cancel the entire order list.
  - If both `orderListId` and `listClientOrderId` parameters are provided, the `orderListId` is searched first, then the `listClientOrderId` from that result is checked against that order. If both conditions are not met the request will be rejected.

  **Data Source:**
  Matching Engine

  Full docs: [Binance API â€“ orderList DELETE](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#cancel-order-list-trade)
  """

  defstruct [:symbol, :orderListId, :listClientOrderId, :newClientOrderId, :recvWindow]

  defimpl BinanceSpotRest.Query do
    def validate(q),
      do:
        q
        |> Valpa.string(:symbol)
        |> Valpa.maybe_integer(:orderListId)
        |> Valpa.maybe_string(:listClientOrderId)
        |> Valpa.maybe_string(:newClientOrderId)
        |> Valpa.map_inclusive_keys([:orderListId, :listClientOrderId])
        |> Valpa.maybe_integer_in_range(:recvWindow, %{min: 0, max: 60_000})

    def prepare(q),
      do: %BinanceSpotRest.Query.RequestSpec{
        metadata: %BinanceSpotRest.Query.EndpointMetadata{
          endpoint: "/api/v3/orderList",
          method: BinanceSpotRest.Enums.Method._delete(),
          security_type: BinanceSpotRest.Enums.SecurityType._TRADE()
        },
        query: q
      }
  end
end
